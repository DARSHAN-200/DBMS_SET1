14 1.a)  Consider table Stud(Roll, Att,Status) 
Write a PL/SQL block for following requirement and handle the exceptions. Roll no. of student 
will be entered by user. Attendance of roll no. entered by user will be checked in Stud table. If 
attendance is less than 75% then display the message “Term not granted” and set the status in 
stud table as “D”. Otherwise display message “Term granted” and set the status in stud table as 
“ND”

CREATE TABLE stud (
    roll INT PRIMARY KEY,
    att INT,
    status VARCHAR(2)
);

INSERT INTO stud (roll, att, status) VALUES (101, 80, NULL);
INSERT INTO stud (roll, att, status) VALUES (102, 60, NULL);
INSERT INTO stud (roll, att, status) VALUES (103, 90, NULL);

DELIMITER //

CREATE PROCEDURE CheckAttendance(IN student_roll INT)
BEGIN
    DECLARE student_att INT;
    
    -- Check if the roll number exists and get attendance
    SELECT att INTO student_att
    FROM stud
    WHERE roll = student_roll;

    IF student_att < 75 THEN
        UPDATE stud
        SET status = 'D'
        WHERE roll = student_roll;
        SELECT 'Term not granted' AS Message;
    ELSE
        UPDATE stud
        SET status = 'ND'
        WHERE roll = student_roll;
        SELECT 'Term granted' AS Message;
    END IF;
    
    -- Exception handling for when no data is found
    IF student_att IS NULL THEN
        SELECT 'No record found for the entered roll number' AS Error;
    END IF;
END;
//

DELIMITER ;
CALL CheckAttendance(102);









b) Write a PL/SQL block for following requirement using user defined exception handling. The 
account_master table records the current balance for an account, which is updated whenever, any 
deposits or withdrawals takes place. If the withdrawal attempted is more than the current balance 
held in the account. The user defined exception is raised, displaying an appropriate message. 
Write a PL/SQL block for above requirement using user defined exception handling.


CREATE TABLE account_master (
    account_id INT PRIMARY KEY,
    balance DECIMAL(10, 2)
);

INSERT INTO account_master (account_id, balance) VALUES (1, 1000.00);
INSERT INTO account_master (account_id, balance) VALUES (2, 500.00);
INSERT INTO account_master (account_id, balance) VALUES (3, 1200.00);
DELIMITER //

DELIMITER //

CREATE PROCEDURE WithdrawAmount(IN acc_id INT, IN amount DECIMAL(10, 2))
BEGIN
    DECLARE current_balance DECIMAL(10, 2);

    -- Ensure only one row is selected by using LIMIT 1
    SELECT balance INTO current_balance
    FROM account_master
    WHERE account_id = acc_id
    LIMIT 1;

    -- Check if the current balance is sufficient for withdrawal
    IF current_balance IS NULL THEN
        SELECT 'No account found for the entered account ID' AS Error;
    ELSEIF amount > current_balance THEN
        SELECT 'Insufficient funds' AS Error;
    ELSE
        UPDATE account_master
        SET balance = current_balance - amount
        WHERE account_id = acc_id;
        SELECT 'Withdrawal successful. New balance: ' AS Message, current_balance - amount AS New_Balance;
    END IF;
END;
//

DELIMITER ;

Call WithDrawAmount(1,100.00);
